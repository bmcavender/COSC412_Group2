package com.gbs.game {
	 import flash.utils.Dictionary; 
	 import com.pblabs.engine.PBE; 
	 import com.pblabs.engine.entity.IEntityComponent; 

	 import com.pblabs.engine.entity.IEntity; 
	 import com.pblabs.starling2D.SpriteRendererG2D; 
	 import flash.geom.Point; 
	 import com.pblabs.starling2D.DisplayObjectSceneG2D; 
	 import com.pblabs.engine.entity.PropertyReference; 
	 import com.pblabs.nape.NapeSpatialComponent; 
	 import com.pblabs.nape.BodyTypeEnum; 
	 import com.pblabs.nape.PolygonCollisionShape; 
	 import com.pblabs.nape.NapeManagerComponent; 
	 import com.pblabs.starling2D.BitmapShapeRendererG2D; 
	 import com.gbs.controllers.PlatformPlayerController; 
	 import com.pblabs.engine.scripting.ExpressionReference; 
	 import com.mslabs.pbe.triggers.LogicMapComponent; 
	 import flash.utils.Dictionary; 
	 import com.pblabs.triggers.actions.PropertySetter; 
	 import com.pblabs.components.stateMachine.FSMComponent; 
	 import com.pblabs.components.stateMachine.Machine; 
	 import com.pblabs.engine.entity.Entity; 
	 import com.pblabs.components.stateMachine.BasicState; 
	 import com.pblabs.engine.core.OrderedArray; 
	 import com.pblabs.starling2D.SpriteSheetRendererG2D; 
	 import com.pblabs.starling2D.spritesheet.SpriteSheetComponentG2D; 
	 import com.pblabs.rendering2D.spritesheet.TexturePackerSheetDivider; 
	 import com.pblabs.engine.resource.JSONResource; 
	 import com.pblabs.engine.resource.ImageResource; 
	 import com.pblabs.rendering2D.AnimationController; 
	 import com.pblabs.rendering2D.AnimationControllerInfo; 
	 import com.pblabs.starling2D.UITextRendererComponentG2D; 
	 import com.pblabs.rendering2D.SimpleSpatialComponent; 
 
	/** 
	* A class generated by the GBS to register all information needed to spawn an entity at runtime using AS3 code. 
	* this is required because the performance of instantiating entities from XML is currently to slow in the flash player. 
	*  
	* There is a method on the templateManger called instantiateEntityFromCallBack and it will search the cache for the entities 
	* based on their names and call the as3 callback function to instantiate an IEntity.  
	**/ 
	public final class EntityCallBacks 
	{
		 public function EntityCallBacks() { 
			 var entityCallBackMap : Dictionary = new Dictionary(); 
			 /*----------------------------------------------------------------------------------------
			 // Entity CallBack For [ Sprite_0 ] 
			 ------------------------------------------------------------------------------------------*/
			 entityCallBackMap['CB_Sprite_0'] = function (name : String = null, alias : String = 'Sprite_0', initialize : Boolean = true):IEntity { 
					 var entityName : String = name; 
					 if(!name) 
						 entityName = alias; 
					 var entityCompRefQue : Vector.<Object> = new Vector.<Object>(); 
					 var retrievedEntity : IEntity; 
					 var retrievedComponent : IEntityComponent; 
				
					 var entity : IEntity = PBE.allocateEntity(); 
					 var renderer:* = new SpriteRendererG2D(); 
					 renderer['zIndex'] = 0; 
					 renderer['rendererOrder'] = 0; 
					 var _positionoffset_1 : * = new Point(); 
					 _positionoffset_1['y'] = 0; 
					 _positionoffset_1['x'] = 0; 
					 renderer['positionOffset'] = _positionoffset_1; 
					 entityCompRefQue.push( {compObject: renderer, propertyName:'scene', entityName:'Scene_AA0F399D-D850-009F-87C2-A38E3ABEC601', componentName:'Scene0'} ); 
					 renderer['rotationOffset'] = 0; 
					 renderer['ignoreTimeScale'] = false;
					 renderer['alpha'] = 1; 
					 renderer['fileName'] = 'Sun_Background.jpg'; 
					 var _scale_1 : * = new Point(); 
					 _scale_1['y'] = 1.64; 
					 _scale_1['x'] = 1.64; 
					 renderer['scale'] = _scale_1; 
					 renderer['rotation'] = 0; 
					 renderer['blendMode'] = 'normal'; 
					 var _size_1 : * = new Point(); 
					 _size_1['y'] = 500; 
					 _size_1['x'] = 500; 
					 renderer['size'] = _size_1; 
					 renderer['mouseEnabled'] = false;
					 var _registrationpoint_1 : * = new Point(); 
					 _registrationpoint_1['y'] = 36; 
					 _registrationpoint_1['x'] = 44; 
					 renderer['registrationPoint'] = _registrationpoint_1; 
					 renderer['layerIndex'] = 0; 
					 var _position_1 : * = new Point(); 
					 _position_1['y'] = -60; 
					 _position_1['x'] = 74; 
					 renderer['position'] = _position_1; 
					 renderer['renderKey'] = 0; 
					 renderer['positionProperty'] = new PropertyReference('@Spatial.position'); 
					 renderer['snapToNearestPixels'] = true;
					 renderer['sizeProperty'] = new PropertyReference('@Spatial.size'); 
					 renderer['rotationProperty'] = new PropertyReference('@Spatial.rotation'); 
				
					 entity.addComponent(renderer, 'Renderer');
				
					 //---------------------------------------------------------------
				
					 var spatial:* = new NapeSpatialComponent(); 
					 spatial['autoAlign'] = true;
					 spatial['debugDisplayEnabled'] = false;
					 spatial['bodyType'] = BodyTypeEnum.STATIC; 
					 spatial['rotation'] = 0; 
					 var collisionShapes_collisionshapes_1 : * = new Array(); 
					 var collisionShapes_currentItem_2 : * = new PolygonCollisionShape(); 
					 var collisionShapes_shapescale_3 : * = new Point(); 
					 collisionShapes_shapescale_3['y'] = 1.64; 
					 collisionShapes_shapescale_3['x'] = 1.64; 
					 collisionShapes_currentItem_2['shapeScale'] = collisionShapes_shapescale_3; 
					 collisionShapes_currentItem_2['friction'] = 1; 
					 collisionShapes_currentItem_2['restitution'] = 0.3; 
					 var collisionShapes_vertices_vertices_3 : * = new Array(); 
					 var collisionShapes_vertices_currentItem_4 : * = new Point(); 
					 collisionShapes_vertices_currentItem_4['y'] = -36.5; 
					 collisionShapes_vertices_currentItem_4['x'] = -44; 
					 collisionShapes_vertices_vertices_3[0] = collisionShapes_vertices_currentItem_4; 
					 var collisionShapes_vertices_currentItem_4 : * = new Point(); 
					 collisionShapes_vertices_currentItem_4['y'] = -36.5; 
					 collisionShapes_vertices_currentItem_4['x'] = 44; 
					 collisionShapes_vertices_vertices_3[1] = collisionShapes_vertices_currentItem_4; 
					 var collisionShapes_vertices_currentItem_4 : * = new Point(); 
					 collisionShapes_vertices_currentItem_4['y'] = 36.5; 
					 collisionShapes_vertices_currentItem_4['x'] = 44; 
					 collisionShapes_vertices_vertices_3[2] = collisionShapes_vertices_currentItem_4; 
					 var collisionShapes_vertices_currentItem_4 : * = new Point(); 
					 collisionShapes_vertices_currentItem_4['y'] = 36.5; 
					 collisionShapes_vertices_currentItem_4['x'] = -44; 
					 collisionShapes_vertices_vertices_3[3] = collisionShapes_vertices_currentItem_4; 
					 collisionShapes_currentItem_2['vertices'] = collisionShapes_vertices_vertices_3; 
					 collisionShapes_currentItem_2['name'] = 'body'; 
					 collisionShapes_currentItem_2['rollingFriction'] = 0.01; 
					 collisionShapes_currentItem_2['isTrigger'] = false;
					 collisionShapes_collisionshapes_1[0] = collisionShapes_currentItem_2; 
					 spatial['collisionShapes'] = collisionShapes_collisionshapes_1; 
					 var _size_1 : * = new Point(); 
					 _size_1['y'] = 500; 
					 _size_1['x'] = 500; 
					 spatial['size'] = _size_1; 
					 var _gravity_1 : * = new Point(); 
					 _gravity_1['y'] = 0; 
					 _gravity_1['x'] = 0; 
					 spatial['gravity'] = _gravity_1; 
					 spatial['ignoreTimeScale'] = false;
					 spatial['canRotate'] = false;
					 var _collisionshapescale_1 : * = new Point(); 
					 _collisionshapescale_1['y'] = 1.64; 
					 _collisionshapescale_1['x'] = 1.64; 
					 spatial['collisionShapeScale'] = _collisionshapescale_1; 
					 spatial['canMove'] = false;
					 spatial['collidesContinuously'] = false;
					 entityCompRefQue.push( {compObject: spatial, propertyName:'spriteForPointChecks', entityName:'Sprite_0', componentName:'Renderer'} ); 
					 entityCompRefQue.push( {compObject: spatial, propertyName:'spatialManager', entityName:'Scene_AA0F399D-D850-009F-87C2-A38E3ABEC601', componentName:'SpatialManager'} ); 
					 var _position_1 : * = new Point(); 
					 _position_1['y'] = -60; 
					 _position_1['x'] = 74; 
					 spatial['position'] = _position_1; 
					 spatial['registerForTicks'] = true;
					 spatial['angularVelocity'] = 0; 
					 var _linearvelocity_1 : * = new Point(); 
					 _linearvelocity_1['y'] = 0; 
					 _linearvelocity_1['x'] = 0; 
					 spatial['linearVelocity'] = _linearvelocity_1; 
					 spatial['updatePriority'] = 0; 
				
					 entity.addComponent(spatial, 'Spatial');
				
					 //---------------------------------------------------------------
				
				
				
					 //Populate Component instances into component variables now that the entity is populated. 
					 for each(var item : Object in entityCompRefQue){ 
						 if(entityName != item.entityName) 
							 retrievedEntity = PBE.lookupEntity(item.entityName);
						 else
							 retrievedEntity = entity;
						 retrievedComponent = retrievedEntity.lookupComponentByName(item.componentName);
						 if(item.compObject[item.propertyName] == null)
							 item.compObject[item.propertyName] = retrievedComponent; 
					 }
					 if(initialize) entity.initialize(name, alias); 
					 return entity; 
				}
				
			 /*----------------------------------------------------------------------------------------
			 // Entity CallBack For [ PlatformCharacter_2 ] 
			 ------------------------------------------------------------------------------------------*/
			 entityCallBackMap['CB_PlatformCharacter_2'] = function (name : String = null, alias : String = 'PlatformCharacter_2', initialize : Boolean = true):IEntity { 
					 var entityName : String = name; 
					 if(!name) 
						 entityName = alias; 
					 var entityCompRefQue : Vector.<Object> = new Vector.<Object>(); 
					 var retrievedEntity : IEntity; 
					 var retrievedComponent : IEntityComponent; 
				
					 var entity : IEntity = PBE.allocateEntity(); 
					 var playerplatformcontroller:* = new PlatformPlayerController(); 
					 playerplatformcontroller['ignoreTimeScale'] = false;
					 entityCompRefQue.push( {compObject: playerplatformcontroller, propertyName:'spatial', entityName:'PlatformCharacter_2', componentName:'Spatial'} ); 
					 playerplatformcontroller['registerForTicks'] = true;
					 playerplatformcontroller['damageVelocityYReference'] = new ExpressionReference('300'); 
					 playerplatformcontroller['enemyKillVelocityReference'] = new ExpressionReference('-90'); 
					 playerplatformcontroller['enemyKillBounceBackVelocityReference'] = new ExpressionReference('250'); 
					 playerplatformcontroller['wallSlideVelocityReference'] = new ExpressionReference('10'); 
					 playerplatformcontroller['leftKeyCode'] = 37; 
					 playerplatformcontroller['rightKeyCode'] = 39; 
					 playerplatformcontroller['jumpKeyCode'] = 32; 
					 playerplatformcontroller['stateMachineProperty'] = new PropertyReference('@PlayerStateMachine'); 
					 playerplatformcontroller['idleState'] = 'Idle'; 
					 playerplatformcontroller['walkState'] = 'Walk'; 
					 playerplatformcontroller['jumpState'] = 'Jump'; 
					 playerplatformcontroller['autoFlipRenderer'] = true;
					 playerplatformcontroller['jumpCountReference'] = new ExpressionReference('2'); 
					 playerplatformcontroller['jumpHangTimeReference'] = new ExpressionReference('10'); 
					 playerplatformcontroller['jumpAccelerationReference'] = new ExpressionReference('260'); 
					 playerplatformcontroller['airJumpDampeningReference'] = new ExpressionReference('0.8'); 
					 playerplatformcontroller['dynamicFriction'] = 2; 
					 playerplatformcontroller['maxHorizontalVelocityReference'] = new ExpressionReference('250'); 
					 playerplatformcontroller['accelerationVelocityReference'] = new ExpressionReference('30'); 
					 playerplatformcontroller['updatePriority'] = 0; 
					 playerplatformcontroller['damageDurationReference'] = new ExpressionReference('1'); 
					 playerplatformcontroller['damageVelocityXReference'] = new ExpressionReference('160'); 
				
					 entity.addComponent(playerplatformcontroller, 'PlayerPlatformController');
				
					 //---------------------------------------------------------------
				
					 var playerstatelogic:* = new LogicMapComponent(); 
					 playerstatelogic['ignoreTimeScale'] = false;
					 var logicMap_logicmap_1 : * = new Dictionary(); 
					 var logicMap_Walk_walk_2 : * = new Array(); 
					 var logicMap_Walk_currentItem_3 : * = new PropertySetter(); 
					 logicMap_Walk_currentItem_3['label'] = 'ChangeAnimation'; 
					 logicMap_Walk_currentItem_3['ignoreTimeScale'] = false;
					 logicMap_Walk_currentItem_3['source'] = 'Walk'; 
					 logicMap_Walk_currentItem_3['property'] = new PropertyReference('@SpriteSheetController.currentAnimationName'); 
					 logicMap_Walk_currentItem_3['passReferences'] = true;
					 logicMap_Walk_currentItem_3['propertyType'] = 'String'; 
					 logicMap_Walk_walk_2[0] = logicMap_Walk_currentItem_3; 
					 logicMap_logicmap_1['Walk'] = logicMap_Walk_walk_2; 
					 var logicMap_Jump_jump_2 : * = new Array(); 
					 var logicMap_Jump_currentItem_3 : * = new PropertySetter(); 
					 logicMap_Jump_currentItem_3['label'] = 'ChangeAnimation'; 
					 logicMap_Jump_currentItem_3['ignoreTimeScale'] = false;
					 logicMap_Jump_currentItem_3['source'] = 'Jump'; 
					 logicMap_Jump_currentItem_3['property'] = new PropertyReference('@SpriteSheetController.currentAnimationName'); 
					 logicMap_Jump_currentItem_3['passReferences'] = true;
					 logicMap_Jump_currentItem_3['propertyType'] = 'String'; 
					 logicMap_Jump_jump_2[0] = logicMap_Jump_currentItem_3; 
					 logicMap_logicmap_1['Jump'] = logicMap_Jump_jump_2; 
					 var logicMap_Idle_idle_2 : * = new Array(); 
					 var logicMap_Idle_currentItem_3 : * = new PropertySetter(); 
					 logicMap_Idle_currentItem_3['label'] = 'ChangeAnimation'; 
					 logicMap_Idle_currentItem_3['ignoreTimeScale'] = false;
					 logicMap_Idle_currentItem_3['source'] = 'Idle'; 
					 logicMap_Idle_currentItem_3['property'] = new PropertyReference('@SpriteSheetController.currentAnimationName'); 
					 logicMap_Idle_currentItem_3['passReferences'] = true;
					 logicMap_Idle_currentItem_3['propertyType'] = 'String'; 
					 logicMap_Idle_idle_2[0] = logicMap_Idle_currentItem_3; 
					 logicMap_logicmap_1['Idle'] = logicMap_Idle_idle_2; 
					 playerstatelogic['logicMap'] = logicMap_logicmap_1; 
					 playerstatelogic['registerForTicks'] = true;
					 playerstatelogic['updatePriority'] = 0; 
					 playerstatelogic['stateMachineReference'] = new PropertyReference('@PlayerStateMachine'); 
				
					 entity.addComponent(playerstatelogic, 'PlayerStateLogic');
				
					 //---------------------------------------------------------------
				
					 var playerstatemachine:* = new FSMComponent(); 
					 playerstatemachine['currentState'] = 'Idle'; 
					 playerstatemachine['registerForTicks'] = true;
					 playerstatemachine['ignoreTimeScale'] = false;
					 var _statemachine_1 : * = new Machine(); 
					 _statemachine_1['currentStateName'] = 'Idle'; 
					 var states_states_2 : * = new Dictionary(); 
					 var Walk_3 : * = new BasicState(); 
					 states_states_2['Walk'] = Walk_3; 
					 var Jump_3 : * = new BasicState(); 
					 states_states_2['Jump'] = Jump_3; 
					 var Idle_3 : * = new BasicState(); 
					 states_states_2['Idle'] = Idle_3; 
					 _statemachine_1['states'] = states_states_2; 
					 _statemachine_1['defaultState'] = 'Idle'; 
					 playerstatemachine['stateMachine'] = _statemachine_1; 
					 playerstatemachine['paused'] = false;
					 playerstatemachine['updatePriority'] = 0; 
				
					 entity.addComponent(playerstatemachine, 'PlayerStateMachine');
				
					 //---------------------------------------------------------------
				
					 var renderer:* = new SpriteSheetRendererG2D(); 
					 renderer['zIndex'] = 2; 
					 renderer['rendererOrder'] = 0; 
					 var _positionoffset_1 : * = new Point(); 
					 _positionoffset_1['y'] = 0; 
					 _positionoffset_1['x'] = 0; 
					 renderer['positionOffset'] = _positionoffset_1; 
					 entityCompRefQue.push( {compObject: renderer, propertyName:'scene', entityName:'Scene_AA0F399D-D850-009F-87C2-A38E3ABEC601', componentName:'Scene0'} ); 
					 renderer['overrideSizePerFrame'] = true;
					 renderer['rotationOffset'] = 0; 
					 renderer['ignoreTimeScale'] = false;
					 renderer['alpha'] = 1; 
					 renderer['spriteIndex'] = 4; 
					 entityCompRefQue.push( {compObject: renderer, propertyName:'spriteSheet', entityName:'PlatformCharacter_2', componentName:'SpriteSheet'} ); 
					 renderer['spriteSheetProperty'] = new PropertyReference('@SpriteSheet'); 
					 var _scale_1 : * = new Point(); 
					 _scale_1['y'] = 1; 
					 _scale_1['x'] = 1; 
					 renderer['scale'] = _scale_1; 
					 renderer['rotation'] = 0; 
					 renderer['blendMode'] = 'normal'; 
					 var _size_1 : * = new Point(); 
					 _size_1['y'] = 94; 
					 _size_1['x'] = 71; 
					 renderer['size'] = _size_1; 
					 renderer['mouseEnabled'] = false;
					 var _registrationpoint_1 : * = new Point(); 
					 _registrationpoint_1['y'] = 47; 
					 _registrationpoint_1['x'] = 34; 
					 renderer['registrationPoint'] = _registrationpoint_1; 
					 renderer['layerIndex'] = 0; 
					 var _position_1 : * = new Point(); 
					 _position_1['y'] = 452; 
					 _position_1['x'] = 38; 
					 renderer['position'] = _position_1; 
					 renderer['renderKey'] = 0; 
					 renderer['positionProperty'] = new PropertyReference('@Spatial.position'); 
					 renderer['snapToNearestPixels'] = true;
					 renderer['sizeProperty'] = new PropertyReference('@Spatial.size'); 
					 renderer['rotationProperty'] = new PropertyReference('@Spatial.rotation'); 
				
					 entity.addComponent(renderer, 'Renderer');
				
					 //---------------------------------------------------------------
				
					 var spatial:* = new NapeSpatialComponent(); 
					 spatial['autoAlign'] = true;
					 spatial['debugDisplayEnabled'] = false;
					 spatial['bodyType'] = BodyTypeEnum.DYNAMIC; 
					 spatial['rotation'] = 0; 
					 var collisionShapes_collisionshapes_1 : * = new Array(); 
					 var collisionShapes_currentItem_2 : * = new PolygonCollisionShape(); 
					 var collisionShapes_shapescale_3 : * = new Point(); 
					 collisionShapes_shapescale_3['y'] = 1; 
					 collisionShapes_shapescale_3['x'] = 1; 
					 collisionShapes_currentItem_2['shapeScale'] = collisionShapes_shapescale_3; 
					 collisionShapes_currentItem_2['friction'] = 1; 
					 collisionShapes_currentItem_2['restitution'] = 0; 
					 var collisionShapes_vertices_vertices_3 : * = new Array(); 
					 var collisionShapes_vertices_currentItem_4 : * = new Point(); 
					 collisionShapes_vertices_currentItem_4['y'] = -46; 
					 collisionShapes_vertices_currentItem_4['x'] = -16.75; 
					 collisionShapes_vertices_vertices_3[0] = collisionShapes_vertices_currentItem_4; 
					 var collisionShapes_vertices_currentItem_4 : * = new Point(); 
					 collisionShapes_vertices_currentItem_4['y'] = -46; 
					 collisionShapes_vertices_currentItem_4['x'] = 16.75; 
					 collisionShapes_vertices_vertices_3[1] = collisionShapes_vertices_currentItem_4; 
					 var collisionShapes_vertices_currentItem_4 : * = new Point(); 
					 collisionShapes_vertices_currentItem_4['y'] = 46; 
					 collisionShapes_vertices_currentItem_4['x'] = 16.75; 
					 collisionShapes_vertices_vertices_3[2] = collisionShapes_vertices_currentItem_4; 
					 var collisionShapes_vertices_currentItem_4 : * = new Point(); 
					 collisionShapes_vertices_currentItem_4['y'] = 46; 
					 collisionShapes_vertices_currentItem_4['x'] = -16.75; 
					 collisionShapes_vertices_vertices_3[3] = collisionShapes_vertices_currentItem_4; 
					 collisionShapes_currentItem_2['vertices'] = collisionShapes_vertices_vertices_3; 
					 collisionShapes_currentItem_2['name'] = 'body'; 
					 collisionShapes_currentItem_2['rollingFriction'] = 0.01; 
					 collisionShapes_currentItem_2['isTrigger'] = false;
					 collisionShapes_collisionshapes_1[0] = collisionShapes_currentItem_2; 
					 spatial['collisionShapes'] = collisionShapes_collisionshapes_1; 
					 var _size_1 : * = new Point(); 
					 _size_1['y'] = 94; 
					 _size_1['x'] = 71; 
					 spatial['size'] = _size_1; 
					 var _gravity_1 : * = new Point(); 
					 _gravity_1['y'] = 0; 
					 _gravity_1['x'] = 1; 
					 spatial['gravity'] = _gravity_1; 
					 spatial['ignoreTimeScale'] = false;
					 spatial['canRotate'] = false;
					 var _collisionshapescale_1 : * = new Point(); 
					 _collisionshapescale_1['y'] = 1; 
					 _collisionshapescale_1['x'] = 1; 
					 spatial['collisionShapeScale'] = _collisionshapescale_1; 
					 spatial['canMove'] = true;
					 spatial['collidesContinuously'] = false;
					 entityCompRefQue.push( {compObject: spatial, propertyName:'spriteForPointChecks', entityName:'PlatformCharacter_2', componentName:'Renderer'} ); 
					 entityCompRefQue.push( {compObject: spatial, propertyName:'spatialManager', entityName:'Scene_AA0F399D-D850-009F-87C2-A38E3ABEC601', componentName:'SpatialManager'} ); 
					 var _position_1 : * = new Point(); 
					 _position_1['y'] = 452; 
					 _position_1['x'] = 38; 
					 spatial['position'] = _position_1; 
					 spatial['registerForTicks'] = true;
					 spatial['angularVelocity'] = 0; 
					 var _linearvelocity_1 : * = new Point(); 
					 _linearvelocity_1['y'] = 0; 
					 _linearvelocity_1['x'] = 0; 
					 spatial['linearVelocity'] = _linearvelocity_1; 
					 spatial['updatePriority'] = 0; 
				
					 entity.addComponent(spatial, 'Spatial');
				
					 //---------------------------------------------------------------
				
					 var spritesheet:* = new SpriteSheetComponentG2D(); 
					 var _divider_1 : * = new TexturePackerSheetDivider(); 
					 _divider_1.resource = PBE.resourceManager.load('AlienWalk.json', JSONResource) as JSONResource; 
					 spritesheet['divider'] = _divider_1; 
					 spritesheet.image = PBE.resourceManager.load('AlienWalk.png', ImageResource) as ImageResource; 
					 spritesheet['cached'] = true;
					 var _center_1 : * = new Point(); 
					 _center_1['y'] = 47; 
					 _center_1['x'] = 34; 
					 spritesheet['center'] = _center_1; 
				
					 entity.addComponent(spritesheet, 'SpriteSheet');
				
					 //---------------------------------------------------------------
				
					 var spritesheetcontroller:* = new AnimationController(); 
					 spritesheetcontroller['ignoreTimeScale'] = false;
					 spritesheetcontroller['defaultAnimation'] = 'Idle'; 
					 spritesheetcontroller['paused'] = false;
					 spritesheetcontroller['spriteSheetReference'] = new PropertyReference('@Renderer.spriteSheet'); 
					 spritesheetcontroller['currentFrameReference'] = new PropertyReference('@Renderer.spriteIndex'); 
					 var animations_animations_1 : * = new Dictionary(); 
					 var Walk_2 : * = new AnimationControllerInfo(); 
					 var animations_customFrameList_customframelist_3 : * = new Array(); 
					 animations_customFrameList_customframelist_3[0] = 2; 
					 animations_customFrameList_customframelist_3[1] = 3; 
					 animations_customFrameList_customframelist_3[2] = 4; 
					 animations_customFrameList_customframelist_3[3] = 5; 
					 animations_customFrameList_customframelist_3[4] = 6; 
					 animations_customFrameList_customframelist_3[5] = 7; 
					 animations_customFrameList_customframelist_3[6] = 8; 
					 animations_customFrameList_customframelist_3[7] = 9; 
					 animations_customFrameList_customframelist_3[8] = 10; 
					 animations_customFrameList_customframelist_3[9] = 11; 
					 Walk_2['customFrameList'] = animations_customFrameList_customframelist_3; 
					 Walk_2['frameRate'] = 30; 
					 Walk_2['maxFrameDelay'] = 1000; 
					 Walk_2['customFrames'] = false;
					 entityCompRefQue.push( {compObject: Walk_2, propertyName:'spriteSheet', entityName:'PlatformCharacter_2', componentName:'SpriteSheet'} ); 
					 Walk_2['loop'] = true;
					 Walk_2['priority'] = 0; 
					 animations_animations_1['Walk'] = Walk_2; 
					 var Jump_2 : * = new AnimationControllerInfo(); 
					 var animations_customFrameList_customframelist_3 : * = new Array(); 
					 animations_customFrameList_customframelist_3[0] = 0; 
					 Jump_2['customFrameList'] = animations_customFrameList_customframelist_3; 
					 Jump_2['frameRate'] = 30; 
					 Jump_2['maxFrameDelay'] = 1000; 
					 Jump_2['customFrames'] = false;
					 entityCompRefQue.push( {compObject: Jump_2, propertyName:'spriteSheet', entityName:'PlatformCharacter_2', componentName:'SpriteSheet'} ); 
					 Jump_2['loop'] = true;
					 Jump_2['priority'] = 0; 
					 animations_animations_1['Jump'] = Jump_2; 
					 var Idle_2 : * = new AnimationControllerInfo(); 
					 var animations_customFrameList_customframelist_3 : * = new Array(); 
					 animations_customFrameList_customframelist_3[0] = 2; 
					 Idle_2['customFrameList'] = animations_customFrameList_customframelist_3; 
					 Idle_2['frameRate'] = 30; 
					 Idle_2['maxFrameDelay'] = 1000; 
					 Idle_2['customFrames'] = false;
					 entityCompRefQue.push( {compObject: Idle_2, propertyName:'spriteSheet', entityName:'PlatformCharacter_2', componentName:'SpriteSheet'} ); 
					 Idle_2['loop'] = true;
					 Idle_2['priority'] = 0; 
					 animations_animations_1['Idle'] = Idle_2; 
					 spritesheetcontroller['animations'] = animations_animations_1; 
				
					 entity.addComponent(spritesheetcontroller, 'SpriteSheetController');
				
					 //---------------------------------------------------------------
				
				
				
					 //Populate Component instances into component variables now that the entity is populated. 
					 for each(var item : Object in entityCompRefQue){ 
						 if(entityName != item.entityName) 
							 retrievedEntity = PBE.lookupEntity(item.entityName);
						 else
							 retrievedEntity = entity;
						 retrievedComponent = retrievedEntity.lookupComponentByName(item.componentName);
						 if(item.compObject[item.propertyName] == null)
							 item.compObject[item.propertyName] = retrievedComponent; 
					 }
					 if(initialize) entity.initialize(name, alias); 
					 return entity; 
				}
				
			 /*----------------------------------------------------------------------------------------
			 // Entity CallBack For [ Square_2 ] 
			 ------------------------------------------------------------------------------------------*/
			 entityCallBackMap['CB_Square_2'] = function (name : String = null, alias : String = 'Square_2', initialize : Boolean = true):IEntity { 
					 var entityName : String = name; 
					 if(!name) 
						 entityName = alias; 
					 var entityCompRefQue : Vector.<Object> = new Vector.<Object>(); 
					 var retrievedEntity : IEntity; 
					 var retrievedComponent : IEntityComponent; 
				
					 var entity : IEntity = PBE.allocateEntity(); 
					 var renderer:* = new BitmapShapeRendererG2D(); 
					 renderer['zIndex'] = 2; 
					 renderer['rendererOrder'] = 0; 
					 var _positionoffset_1 : * = new Point(); 
					 _positionoffset_1['y'] = 0; 
					 _positionoffset_1['x'] = 0; 
					 renderer['positionOffset'] = _positionoffset_1; 
					 entityCompRefQue.push( {compObject: renderer, propertyName:'scene', entityName:'Scene_AA0F399D-D850-009F-87C2-A38E3ABEC601', componentName:'Scene0'} ); 
					 renderer['rotationOffset'] = 0; 
					 renderer['isSquare'] = true;
					 renderer['fillAlpha'] = 1; 
					 renderer['ignoreTimeScale'] = false;
					 renderer['alpha'] = 1; 
					 renderer['fillColor'] = 16750848; 
					 renderer['isCircle'] = false;
					 var _scale_1 : * = new Point(); 
					 _scale_1['y'] = 1; 
					 _scale_1['x'] = 8.08; 
					 renderer['scale'] = _scale_1; 
					 renderer['lineColor'] = 65280; 
					 renderer['rotation'] = 0; 
					 renderer['blendMode'] = 'normal'; 
					 var _size_1 : * = new Point(); 
					 _size_1['y'] = 100; 
					 _size_1['x'] = 100; 
					 renderer['size'] = _size_1; 
					 renderer['mouseEnabled'] = false;
					 var _registrationpoint_1 : * = new Point(); 
					 _registrationpoint_1['y'] = 50; 
					 _registrationpoint_1['x'] = 50; 
					 renderer['registrationPoint'] = _registrationpoint_1; 
					 renderer['layerIndex'] = 0; 
					 var _position_1 : * = new Point(); 
					 _position_1['y'] = 548; 
					 _position_1['x'] = 397; 
					 renderer['position'] = _position_1; 
					 renderer['lineSize'] = 0; 
					 renderer['lineAlpha'] = 0; 
					 renderer['radius'] = 50; 
					 renderer['renderKey'] = 0; 
					 renderer['positionProperty'] = new PropertyReference('@Spatial.position'); 
					 renderer['snapToNearestPixels'] = true;
					 renderer['sizeProperty'] = new PropertyReference('@Spatial.size'); 
					 renderer['rotationProperty'] = new PropertyReference('@Spatial.rotation'); 
				
					 entity.addComponent(renderer, 'Renderer');
				
					 //---------------------------------------------------------------
				
					 var spatial:* = new NapeSpatialComponent(); 
					 spatial['autoAlign'] = true;
					 spatial['debugDisplayEnabled'] = false;
					 spatial['bodyType'] = BodyTypeEnum.KINEMATIC; 
					 spatial['rotation'] = 0; 
					 var collisionShapes_collisionshapes_1 : * = new Array(); 
					 var collisionShapes_currentItem_2 : * = new PolygonCollisionShape(); 
					 var collisionShapes_shapescale_3 : * = new Point(); 
					 collisionShapes_shapescale_3['y'] = 1; 
					 collisionShapes_shapescale_3['x'] = 8.08; 
					 collisionShapes_currentItem_2['shapeScale'] = collisionShapes_shapescale_3; 
					 collisionShapes_currentItem_2['friction'] = 1; 
					 collisionShapes_currentItem_2['restitution'] = 0.3; 
					 var collisionShapes_vertices_vertices_3 : * = new Array(); 
					 var collisionShapes_vertices_currentItem_4 : * = new Point(); 
					 collisionShapes_vertices_currentItem_4['y'] = -50; 
					 collisionShapes_vertices_currentItem_4['x'] = -50; 
					 collisionShapes_vertices_vertices_3[0] = collisionShapes_vertices_currentItem_4; 
					 var collisionShapes_vertices_currentItem_4 : * = new Point(); 
					 collisionShapes_vertices_currentItem_4['y'] = -50; 
					 collisionShapes_vertices_currentItem_4['x'] = 50; 
					 collisionShapes_vertices_vertices_3[1] = collisionShapes_vertices_currentItem_4; 
					 var collisionShapes_vertices_currentItem_4 : * = new Point(); 
					 collisionShapes_vertices_currentItem_4['y'] = 50; 
					 collisionShapes_vertices_currentItem_4['x'] = 50; 
					 collisionShapes_vertices_vertices_3[2] = collisionShapes_vertices_currentItem_4; 
					 var collisionShapes_vertices_currentItem_4 : * = new Point(); 
					 collisionShapes_vertices_currentItem_4['y'] = 50; 
					 collisionShapes_vertices_currentItem_4['x'] = -50; 
					 collisionShapes_vertices_vertices_3[3] = collisionShapes_vertices_currentItem_4; 
					 collisionShapes_currentItem_2['vertices'] = collisionShapes_vertices_vertices_3; 
					 collisionShapes_currentItem_2['name'] = 'body'; 
					 collisionShapes_currentItem_2['rollingFriction'] = 0.01; 
					 collisionShapes_currentItem_2['isTrigger'] = false;
					 collisionShapes_collisionshapes_1[0] = collisionShapes_currentItem_2; 
					 spatial['collisionShapes'] = collisionShapes_collisionshapes_1; 
					 var _size_1 : * = new Point(); 
					 _size_1['y'] = 100; 
					 _size_1['x'] = 100; 
					 spatial['size'] = _size_1; 
					 var _gravity_1 : * = new Point(); 
					 _gravity_1['y'] = 0; 
					 _gravity_1['x'] = 0; 
					 spatial['gravity'] = _gravity_1; 
					 spatial['ignoreTimeScale'] = false;
					 spatial['canRotate'] = true;
					 var _collisionshapescale_1 : * = new Point(); 
					 _collisionshapescale_1['y'] = 1; 
					 _collisionshapescale_1['x'] = 8.08; 
					 spatial['collisionShapeScale'] = _collisionshapescale_1; 
					 spatial['canMove'] = true;
					 spatial['collidesContinuously'] = false;
					 entityCompRefQue.push( {compObject: spatial, propertyName:'spriteForPointChecks', entityName:'Square_2', componentName:'Renderer'} ); 
					 entityCompRefQue.push( {compObject: spatial, propertyName:'spatialManager', entityName:'Scene_AA0F399D-D850-009F-87C2-A38E3ABEC601', componentName:'SpatialManager'} ); 
					 var _position_1 : * = new Point(); 
					 _position_1['y'] = 548; 
					 _position_1['x'] = 397; 
					 spatial['position'] = _position_1; 
					 spatial['registerForTicks'] = true;
					 spatial['angularVelocity'] = 0; 
					 var _linearvelocity_1 : * = new Point(); 
					 _linearvelocity_1['y'] = 0; 
					 _linearvelocity_1['x'] = 0; 
					 spatial['linearVelocity'] = _linearvelocity_1; 
					 spatial['updatePriority'] = 0; 
				
					 entity.addComponent(spatial, 'Spatial');
				
					 //---------------------------------------------------------------
				
				
				
					 //Populate Component instances into component variables now that the entity is populated. 
					 for each(var item : Object in entityCompRefQue){ 
						 if(entityName != item.entityName) 
							 retrievedEntity = PBE.lookupEntity(item.entityName);
						 else
							 retrievedEntity = entity;
						 retrievedComponent = retrievedEntity.lookupComponentByName(item.componentName);
						 if(item.compObject[item.propertyName] == null)
							 item.compObject[item.propertyName] = retrievedComponent; 
					 }
					 if(initialize) entity.initialize(name, alias); 
					 return entity; 
				}
				
			 /*----------------------------------------------------------------------------------------
			 // Entity CallBack For [ Square_3 ] 
			 ------------------------------------------------------------------------------------------*/
			 entityCallBackMap['CB_Square_3'] = function (name : String = null, alias : String = 'Square_3', initialize : Boolean = true):IEntity { 
					 var entityName : String = name; 
					 if(!name) 
						 entityName = alias; 
					 var entityCompRefQue : Vector.<Object> = new Vector.<Object>(); 
					 var retrievedEntity : IEntity; 
					 var retrievedComponent : IEntityComponent; 
				
					 var entity : IEntity = PBE.allocateEntity(); 
					 var renderer:* = new BitmapShapeRendererG2D(); 
					 renderer['zIndex'] = 3; 
					 renderer['rendererOrder'] = 0; 
					 var _positionoffset_1 : * = new Point(); 
					 _positionoffset_1['y'] = 0; 
					 _positionoffset_1['x'] = 0; 
					 renderer['positionOffset'] = _positionoffset_1; 
					 entityCompRefQue.push( {compObject: renderer, propertyName:'scene', entityName:'Scene_AA0F399D-D850-009F-87C2-A38E3ABEC601', componentName:'Scene0'} ); 
					 renderer['rotationOffset'] = 0; 
					 renderer['isSquare'] = true;
					 renderer['fillAlpha'] = 1; 
					 renderer['ignoreTimeScale'] = false;
					 renderer['alpha'] = 1; 
					 renderer['fillColor'] = 16750848; 
					 renderer['isCircle'] = false;
					 var _scale_1 : * = new Point(); 
					 _scale_1['y'] = 1; 
					 _scale_1['x'] = 1; 
					 renderer['scale'] = _scale_1; 
					 renderer['lineColor'] = 65280; 
					 renderer['rotation'] = 0; 
					 renderer['blendMode'] = 'normal'; 
					 var _size_1 : * = new Point(); 
					 _size_1['y'] = 100; 
					 _size_1['x'] = 100; 
					 renderer['size'] = _size_1; 
					 renderer['mouseEnabled'] = false;
					 var _registrationpoint_1 : * = new Point(); 
					 _registrationpoint_1['y'] = 50; 
					 _registrationpoint_1['x'] = 50; 
					 renderer['registrationPoint'] = _registrationpoint_1; 
					 renderer['layerIndex'] = 0; 
					 var _position_1 : * = new Point(); 
					 _position_1['y'] = 450; 
					 _position_1['x'] = 720; 
					 renderer['position'] = _position_1; 
					 renderer['lineSize'] = 0; 
					 renderer['lineAlpha'] = 0; 
					 renderer['radius'] = 50; 
					 renderer['renderKey'] = 0; 
					 renderer['positionProperty'] = new PropertyReference('@Spatial.position'); 
					 renderer['snapToNearestPixels'] = true;
					 renderer['sizeProperty'] = new PropertyReference('@Spatial.size'); 
					 renderer['rotationProperty'] = new PropertyReference('@Spatial.rotation'); 
				
					 entity.addComponent(renderer, 'Renderer');
				
					 //---------------------------------------------------------------
				
					 var spatial:* = new NapeSpatialComponent(); 
					 spatial['autoAlign'] = true;
					 spatial['debugDisplayEnabled'] = false;
					 spatial['bodyType'] = BodyTypeEnum.DYNAMIC; 
					 spatial['rotation'] = 0; 
					 var collisionShapes_collisionshapes_1 : * = new Array(); 
					 var collisionShapes_currentItem_2 : * = new PolygonCollisionShape(); 
					 var collisionShapes_shapescale_3 : * = new Point(); 
					 collisionShapes_shapescale_3['y'] = 1; 
					 collisionShapes_shapescale_3['x'] = 1; 
					 collisionShapes_currentItem_2['shapeScale'] = collisionShapes_shapescale_3; 
					 collisionShapes_currentItem_2['friction'] = 1; 
					 collisionShapes_currentItem_2['restitution'] = 0.3; 
					 var collisionShapes_vertices_vertices_3 : * = new Array(); 
					 var collisionShapes_vertices_currentItem_4 : * = new Point(); 
					 collisionShapes_vertices_currentItem_4['y'] = -50; 
					 collisionShapes_vertices_currentItem_4['x'] = -50; 
					 collisionShapes_vertices_vertices_3[0] = collisionShapes_vertices_currentItem_4; 
					 var collisionShapes_vertices_currentItem_4 : * = new Point(); 
					 collisionShapes_vertices_currentItem_4['y'] = -50; 
					 collisionShapes_vertices_currentItem_4['x'] = 50; 
					 collisionShapes_vertices_vertices_3[1] = collisionShapes_vertices_currentItem_4; 
					 var collisionShapes_vertices_currentItem_4 : * = new Point(); 
					 collisionShapes_vertices_currentItem_4['y'] = 50; 
					 collisionShapes_vertices_currentItem_4['x'] = 50; 
					 collisionShapes_vertices_vertices_3[2] = collisionShapes_vertices_currentItem_4; 
					 var collisionShapes_vertices_currentItem_4 : * = new Point(); 
					 collisionShapes_vertices_currentItem_4['y'] = 50; 
					 collisionShapes_vertices_currentItem_4['x'] = -50; 
					 collisionShapes_vertices_vertices_3[3] = collisionShapes_vertices_currentItem_4; 
					 collisionShapes_currentItem_2['vertices'] = collisionShapes_vertices_vertices_3; 
					 collisionShapes_currentItem_2['material'] = 'Ice'; 
					 collisionShapes_currentItem_2['name'] = 'body'; 
					 collisionShapes_currentItem_2['rollingFriction'] = 0.01; 
					 collisionShapes_currentItem_2['isTrigger'] = false;
					 collisionShapes_collisionshapes_1[0] = collisionShapes_currentItem_2; 
					 spatial['collisionShapes'] = collisionShapes_collisionshapes_1; 
					 var _size_1 : * = new Point(); 
					 _size_1['y'] = 100; 
					 _size_1['x'] = 100; 
					 spatial['size'] = _size_1; 
					 var _gravity_1 : * = new Point(); 
					 _gravity_1['y'] = 0; 
					 _gravity_1['x'] = 0; 
					 spatial['gravity'] = _gravity_1; 
					 spatial['ignoreTimeScale'] = false;
					 spatial['canRotate'] = true;
					 var _collisionshapescale_1 : * = new Point(); 
					 _collisionshapescale_1['y'] = 1; 
					 _collisionshapescale_1['x'] = 1; 
					 spatial['collisionShapeScale'] = _collisionshapescale_1; 
					 spatial['canMove'] = true;
					 spatial['collidesContinuously'] = false;
					 entityCompRefQue.push( {compObject: spatial, propertyName:'spriteForPointChecks', entityName:'Square_3', componentName:'Renderer'} ); 
					 entityCompRefQue.push( {compObject: spatial, propertyName:'spatialManager', entityName:'Scene_AA0F399D-D850-009F-87C2-A38E3ABEC601', componentName:'SpatialManager'} ); 
					 var _position_1 : * = new Point(); 
					 _position_1['y'] = 450; 
					 _position_1['x'] = 720; 
					 spatial['position'] = _position_1; 
					 spatial['registerForTicks'] = true;
					 spatial['angularVelocity'] = 0; 
					 var _linearvelocity_1 : * = new Point(); 
					 _linearvelocity_1['y'] = 0; 
					 _linearvelocity_1['x'] = -1; 
					 spatial['linearVelocity'] = _linearvelocity_1; 
					 spatial['updatePriority'] = 0; 
				
					 entity.addComponent(spatial, 'Spatial');
				
					 //---------------------------------------------------------------
				
				
				
					 //Populate Component instances into component variables now that the entity is populated. 
					 for each(var item : Object in entityCompRefQue){ 
						 if(entityName != item.entityName) 
							 retrievedEntity = PBE.lookupEntity(item.entityName);
						 else
							 retrievedEntity = entity;
						 retrievedComponent = retrievedEntity.lookupComponentByName(item.componentName);
						 if(item.compObject[item.propertyName] == null)
							 item.compObject[item.propertyName] = retrievedComponent; 
					 }
					 if(initialize) entity.initialize(name, alias); 
					 return entity; 
				}
				
			 /*----------------------------------------------------------------------------------------
			 // Entity CallBack For [ Label_4 ] 
			 ------------------------------------------------------------------------------------------*/
			 entityCallBackMap['CB_Label_4'] = function (name : String = null, alias : String = 'Label_4', initialize : Boolean = true):IEntity { 
					 var entityName : String = name; 
					 if(!name) 
						 entityName = alias; 
					 var entityCompRefQue : Vector.<Object> = new Vector.<Object>(); 
					 var retrievedEntity : IEntity; 
					 var retrievedComponent : IEntityComponent; 
				
					 var entity : IEntity = PBE.allocateEntity(); 
					 var renderer:* = new UITextRendererComponentG2D(); 
					 renderer['rotationOffset'] = 0; 
					 var _positionoffset_1 : * = new Point(); 
					 _positionoffset_1['y'] = 0; 
					 _positionoffset_1['x'] = 0; 
					 renderer['positionOffset'] = _positionoffset_1; 
					 entityCompRefQue.push( {compObject: renderer, propertyName:'scene', entityName:'Scene_AA0F399D-D850-009F-87C2-A38E3ABEC601', componentName:'Scene0'} ); 
					 renderer['ignoreTimeScale'] = false;
					 renderer['alpha'] = 1; 
					 renderer['fontName'] = 'Arial'; 
					 renderer['autoResize'] = true;
					 renderer['fontColor'] = 0; 
					 renderer['text'] = 'This is the game!'; 
					 renderer['fontSize'] = 30; 
					 renderer['autoResizeDirection'] = 'vertical'; 
					 renderer['type'] = 'dynamic'; 
					 var _scale_1 : * = new Point(); 
					 _scale_1['y'] = 1; 
					 _scale_1['x'] = 1; 
					 renderer['scale'] = _scale_1; 
					 renderer['fontItalic'] = false;
					 renderer['rotation'] = 0; 
					 renderer['blendMode'] = 'normal'; 
					 var _size_1 : * = new Point(); 
					 _size_1['y'] = 39; 
					 _size_1['x'] = 232; 
					 renderer['size'] = _size_1; 
					 renderer['fontBold'] = false;
					 renderer['mouseEnabled'] = false;
					 var _registrationpoint_1 : * = new Point(); 
					 _registrationpoint_1['y'] = 0; 
					 _registrationpoint_1['x'] = 0; 
					 renderer['registrationPoint'] = _registrationpoint_1; 
					 renderer['wordWrap'] = false;
					 renderer['layerIndex'] = 0; 
					 var _position_1 : * = new Point(); 
					 _position_1['y'] = 7; 
					 _position_1['x'] = 288; 
					 renderer['position'] = _position_1; 
					 renderer['zIndex'] = 4; 
					 renderer['rendererOrder'] = 0; 
					 renderer['renderKey'] = 0; 
					 renderer['positionProperty'] = new PropertyReference('@Spatial.position'); 
					 renderer['snapToNearestPixels'] = true;
					 renderer['sizeProperty'] = new PropertyReference('@Spatial.size'); 
					 renderer['rotationProperty'] = new PropertyReference('@Spatial.rotation'); 
				
					 entity.addComponent(renderer, 'Renderer');
				
					 //---------------------------------------------------------------
				
					 var spatial:* = new SimpleSpatialComponent(); 
					 spatial['rotation'] = 0; 
					 spatial['ignoreTimeScale'] = false;
					 entityCompRefQue.push( {compObject: spatial, propertyName:'spatialManager', entityName:'Scene_AA0F399D-D850-009F-87C2-A38E3ABEC601', componentName:'SpatialManager'} ); 
					 var _size_1 : * = new Point(); 
					 _size_1['y'] = 39; 
					 _size_1['x'] = 232; 
					 spatial['size'] = _size_1; 
					 var _position_1 : * = new Point(); 
					 _position_1['y'] = 7; 
					 _position_1['x'] = 288; 
					 spatial['position'] = _position_1; 
					 entityCompRefQue.push( {compObject: spatial, propertyName:'spriteForPointChecks', entityName:'Label_4', componentName:'Renderer'} ); 
					 spatial['registerForTicks'] = true;
					 spatial['angularVelocity'] = 0; 
					 var _linearvelocity_1 : * = new Point(); 
					 _linearvelocity_1['y'] = 0; 
					 _linearvelocity_1['x'] = 0; 
					 spatial['linearVelocity'] = _linearvelocity_1; 
					 spatial['updatePriority'] = 0; 
				
					 entity.addComponent(spatial, 'Spatial');
				
					 //---------------------------------------------------------------
				
				
				
					 //Populate Component instances into component variables now that the entity is populated. 
					 for each(var item : Object in entityCompRefQue){ 
						 if(entityName != item.entityName) 
							 retrievedEntity = PBE.lookupEntity(item.entityName);
						 else
							 retrievedEntity = entity;
						 retrievedComponent = retrievedEntity.lookupComponentByName(item.componentName);
						 if(item.compObject[item.propertyName] == null)
							 item.compObject[item.propertyName] = retrievedComponent; 
					 }
					 if(initialize) entity.initialize(name, alias); 
					 return entity; 
				}
				
			 for(var key : String in entityCallBackMap) { 
				 PBE.templateManager.registerEntityCallback(key, entityCallBackMap[key]); 
			 } 
		}
	}
}
